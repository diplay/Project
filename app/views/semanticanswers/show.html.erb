<div id="semanticNetwork">

</div>




<script type="text/javascript" src="/jquery.js"></script>
<script type="text/javascript" src="/raphael.js"></script>

<div align="center"> Время( <label id="min" contentEditable=true></label>:<label id="sec" contentEditable=true></label>:
	<label id="complete" contentEditable=true></label>) </div>


<script>
	var mytime = <%=900 - ((Time.now.to_i).floor - (@semantic.created_at.to_i).floor)%>
		var minutes = (mytime / 60).toFixed(0);
	var seconds = (mytime % 60);

	var time = []
	time.push(minutes);
	time.push(seconds);
	timerId = setInterval(function () {

		time[1]--;
		if (time[1] < 0) {
			time[1] = 59
			time[0]--;
		}
		$("#min").text(time[0]);
		$("#sec").text(time[1]);
		if (time[0] <= 0) {
			$("#complete").text("ЗАВЕРШИТЬ");
			$("#min").text(0);
			$("#sec").text(0);

		}


	}, 1000);
</script>
<script>
	String.prototype.replaceAll = function (search, replace) {
		return this.split(search).join(replace);
	}

	Array.prototype.remove = function (index, stay) {
		var a = [];
		for (var i = 0; i < this.length; i++) {
			a.push(this[i]);
		}
		a.splice(index, 1);
		if (!stay) {
			this.splice(index, 1);
		}
		return a;
	}

	var nodes = [];
	window.onload = function () {


		Raphael.fn.connection = function (obj1, to, line, text) {

			if (to instanceof Node) {
				var obj2 = to.shape;
			} else {
				var obj2 = to;
			}
			if (obj1.line && obj1.from && obj1.to) {
				line = obj1;

				obj1 = line.from;
				obj2 = line.to;
			}

			if (obj1 == null || obj2 == null) {
				return;
			}

			var bb1 = obj1.getBBox(),
				bb2 = obj2.getBBox(),
				p = [{
						x: bb1.x + bb1.width / 2,
						y: bb1.y - 1
					},
					{
						x: bb1.x + bb1.width / 2,
						y: bb1.y + bb1.height + 1
					},
					{
						x: bb1.x - 1,
						y: bb1.y + bb1.height / 2
					},
					{
						x: bb1.x + bb1.width + 1,
						y: bb1.y + bb1.height / 2
					},
					{
						x: bb2.x + bb2.width / 2,
						y: bb2.y - 1
					},
					{
						x: bb2.x + bb2.width / 2,
						y: bb2.y + bb2.height + 1
					},
					{
						x: bb2.x - 1,
						y: bb2.y + bb2.height / 2
					},
					{
						x: bb2.x + bb2.width + 1,
						y: bb2.y + bb2.height / 2
					}
				],
				d = {},
				dis = [];
			for (var i = 0; i < 4; i++) {
				for (var j = 4; j < 8; j++) {
					var dx = Math.abs(p[i].x - p[j].x),
						dy = Math.abs(p[i].y - p[j].y);
					if ((i == j - 4) || (((i != 3 && j != 6) || p[i].x < p[j].x) && ((i != 2 && j != 7) ||
								p[i].x > p[j].x) && ((i != 0 && j != 5) || p[i].y > p[j].y) &&
							((i != 1 && j != 4) || p[i].y < p[j].y))) {
						dis.push(dx + dy);
						d[dis[dis.length - 1]] = [i, j];
					}
				}
			}
			if (dis.length == 0) {
				var res = [0, 4];
			} else {
				res = d[Math.min.apply(Math, dis)];
			}
			var x1 = p[res[0]].x,
				y1 = p[res[0]].y,
				x4 = p[res[1]].x,
				y4 = p[res[1]].y;
			dx = Math.max(Math.abs(x1 - x4) / 2, 10);
			dy = Math.max(Math.abs(y1 - y4) / 2, 10);
			var x2 = [x1, x1, x1 - dx, x1 + dx][res[0]].toFixed(3),
				y2 = [y1 - dy, y1 + dy, y1, y1][res[0]].toFixed(3),
				x3 = [0, 0, 0, 0, x4, x4, x4 - dx, x4 + dx][res[1]].toFixed(3),
				y3 = [0, 0, 0, 0, y1 + dy, y1 - dy, y4, y4][res[1]].toFixed(3);
			var path = ["M", x1.toFixed(3), y1.toFixed(3), "C", x2, y2, x3, y3, x4.toFixed(3), y4.toFixed(3)].join(
				",");


			if (line && line.line) {

				line.line.attr({
					path: path
				});
			} else {
				var color = typeof line == "string" ? line : "#000";

				textObj = r.text((obj1.attr("cx") + obj2.attr("cx")) / 2, (obj1.attr("cy") + obj2.attr("cy")) / 2,
					text);
				textObj.myobj = obj1;
				textObj.myline = line;
				textObj.drag(null, textclick, null);


				return {
					text: textObj,
					line: this.path(path).attr({
						stroke: color,
						fill: "none",
						"arrow-end": "open-wide-long"
					}),
					from: obj1,
					to: obj2,
					toNode: to
				};
			}
		};

		function textclick() {

			this.hide();
			this.remove();
			cleanLinks();
		}



		function cleanLinks() {
			for (var i = 0; i < nodes.length; i++) {
				for (var j = 1; j < nodes[i].connections.length; j++) {

					if (nodes[i].connections[j].text.attr("text") == null) {
						var temp = nodes[i].connections[j];
						nodes[i].connections[j].line.hide();
						nodes[i].connections[j] = nodes[i].connections[nodes[i].connections.length - 1];
						nodes[i].connections[nodes[i].connections.length - 1] = temp;
						nodes[i].connections[nodes[i].connections.length - 1].line.remove();
						nodes[i].connections.pop();
					}
				}
			}
		}


		var r = Raphael("semanticNetwork", 1430, 750);
		var windowSemantic = r.rect(1, 25, 875, 640, 4);
		var helper = r.rect(875, 25, 275, 640, 4);
		var infohelper = r.rect(1150, 25, 275, 640, 4);





		function ellipseinfo() {

			//Движение эллипса
			var myrect = r.rect(1175, 100, 200, 200, 3);
			var ellips = r.ellipse(1300, 250, 40, 25);


			ellips.attr({
				fill: Raphael.getColor(),
				stroke: Raphael.getColor(),
				"fill-opacity": 0.2
			});
			var ring = r.circle(ellips.attr("cx") + ellips.attr("rx") - 5, ellips.attr("cy"), 5)
			var elrect = r.rect(ellips.attr("cx") - ellips.attr("rx") + 5, ellips.attr("cy"), 10, 10, 2)
			var text = r.text(ellips.attr("cx"), ellips.attr("cy"), "Пример");
			var textinfo = r.text(1275, 75,
				"Зажмите элемент эллипса и двигайте по полю:) \n Для превращения вершины в предикатную\n используйте квадратик ;) "
			);
			textinfo.attr({
				fill: Raphael.getColor(),
				stroke: Raphael.getColor()
			});
			var mouseimage = r.image("/Images/mouse.png", ellips.attr("cx"), ellips.attr("cy"), 25, 25);
			var line = r.connection(ellips, ring, ellips.attr("fill"), "")
			var ex = 1;
			var ey = 1;
			var ellipseButton = new iButton(r.rect(1175, 300, 75, 25, 1), "Перемещение");
			ellipseButton.rect.click(function () {

				var moveellipse = setInterval(function () {
					if (ellips.attr("cx") - ellips.attr("rx") <= myrect.attr("x")) {
						ex = 1 + Math.random(1);
					}
					if (ellips.attr("cy") - ellips.attr("ry") <= myrect.attr("y")) {
						ey = 1 + Math.random(1);;
					}
					if (ellips.attr("cx") + ellips.attr("rx") >= myrect.attr("x") + myrect.attr(
							"height")) {
						ex = -1 - Math.random(1);;
					}
					if (ellips.attr("cy") + ellips.attr("ry") >= myrect.attr("y") + myrect.attr(
							"width")) {
						ey = -1 - Math.random(2) - 1;
					}
					r.connection(line);
					ellips.attr({
						cx: ellips.attr("cx") + ex,
						cy: ellips.attr("cy") + ey
					});
					text.attr({
						x: ellips.attr("cx"),
						y: ellips.attr("cy")
					});
					ring.attr({
						cx: ellips.attr("cx") + ellips.attr("rx") - 5,
						cy: ellips.attr("cy")
					});
					elrect.attr({
						x: ellips.attr("cx") - ellips.attr("rx"),
						y: ellips.attr("cy") - elrect.attr("height") / 2
					});
					mouseimage.attr({
						x: ellips.attr("cx"),
						y: ellips.attr("cy"),
						height: 20,
						width: 20
					});

				}, 50);
				setTimeout(function () {
					clearInterval(moveellipse);
					mouseimage.attr({
						height: 25,
						width: 25
					});

				}, 10000);
			});


			var ringbutton = new iButton(r.rect(1250, 300, 75, 25, 1), "Соединение");
			ringbutton.rect.click(function () {
					var moveellipse = setInterval(function () {
						if (ring.attr("cx") <= myrect.attr("x")) {
							ex = 1 + Math.random(1);
						}
						if (ring.attr("cy") <= myrect.attr("y")) {
							ey = 1 + Math.random(1);;
						}
						if (ring.attr("cx") >= myrect.attr("x") + myrect.attr("height")) {
							ex = -1 - Math.random(1);;
						}
						if (ring.attr("cy") >= myrect.attr("y") + myrect.attr("width")) {
							ey = -1 - Math.random(2) - 1;
						}
						r.connection(line);


						ring.attr({
							cx: ring.attr("cx") + ex,
							cy: ring.attr("cy") + ey
						});

						mouseimage.attr({
							x: ring.attr("cx"),
							y: ring.attr("cy"),
							height: 20,
							width: 20
						});


					}, 50);
					setTimeout(function () {
						clearInterval(moveellipse);

						ring.attr({
							cx: ellips.attr("cx") + ellips.attr("rx") - 5,
							cy: ellips.attr("cy")
						});
						r.connection(line);
						mouseimage.attr({
							height: 25,
							width: 25
						});

					}, 10000);



				}

			);
		}



		function helpmenu(texts) {

			for (var i = 0; i < texts.length; i++) {
				var t1 = r.text(1012, 75 + 25 * i, texts[i])
				t1.attr({
					fill: Raphael.getColor(),
					stroke: Raphael.getColor(),
					"fill-opacity": 0
				});
				t1.attr({
					"font-size": 14,
					"font-family": "Arial, Helvetica, sans-serif"
				});
			}

		}

		function drag(x, y) {

			this.ox = this.type == "rect" ? this.attr("x") : this.attr("cx");
			this.oy = this.type == "rect" ? this.attr("y") : this.attr("cy");

			this.animate({
				"fill-opacity": 0.5
			}, 10);
		};

		var up = function () {

			this.animate({
				"fill-opacity": 0.1
			}, 100);

		};

		var move = function (x, y) {


			var mynode = this.mynode;
			mynode.shape.attr({
				cx: this.ox + x,
				cy: this.oy + y
			});
			mynode.circl.attr({
				cx: this.ox + x + mynode.shape.attr("rx") - 5,
				cy: this.oy + y
			});
			mynode.text.attr({
				x: this.ox + x,
				y: this.oy + y
			});
			mynode.srect.attr({
				x: this.ox + x - mynode.shape.attr("rx"),
				y: this.oy + y - 5
			});
			if (mynode.rect != null) {
				mynode.rect.attr({
					x: this.ox + x - mynode.shape.attr("rx"),
					y: this.oy + y - mynode.shape.attr("ry")
				});
			}
			updateConnections();
			r.safari();


		};

		function dragcircle(x, y) {

			this.ox = this.type == "rect" ? this.attr("x") : this.attr("cx");
			this.oy = this.type == "rect" ? this.attr("y") : this.attr("cy");
			this.mynode.connections[0].line.show();

			this.animate({
				"fill-opacity": 0.5
			}, 100);
		};
		var movecircle = function (x, y) {
			this.attr({
				cx: this.ox + x,
				cy: this.oy + y
			});
			r.connection(this.mynode.connections[0]);

			r.safari();
		}
		var upcircle = function () {
			addconnect(this.mynode);
			updateConnections();
			this.attr({
				cx: this.mynode.shape.attr("cx") + this.mynode.shape.attr("rx") - 5,
				cy: this.mynode.shape.attr("cy")
			});
			this.animate({
				"fill-opacity": 0.1
			}, 100);
			r.connection(this.mynode.connections[0]);
			this.mynode.connections[0].line.hide();
		}

		var rectClick = function () {
			var mynode = this.mynode;
			if (mynode.predicat) {
				mynode.predicat = false;
				mynode.rect.hide();
			} else {
				mynode.predicat = true;
				mynode.rect.show();
			}
		}

		function addconnect(node) // создание связи
		{
			for (var i = 0; i < nodes.length; i++) {
				if ((Math.pow((node.circl.attr("cx")) - (nodes[i].shape.attr("cx")), 2) / Math.pow(nodes[i].shape.attr(
							"rx"), 2) +
						Math.pow((node.circl.attr("cy")) - (nodes[i].shape.attr("cy")), 2) / Math.pow(nodes[i].shape
							.attr("ry"), 2)) <= 1 &&
					node != nodes[i]) {
					var act = prompt('Введите название Глубинного падежа');
					if (act != null && act.length == 1) {
						node.add(r.connection(node.shape, nodes[i], node.shape.attr("fill"), act));

					}

				}
			}
		}

		function updateConnections() //Обновление всех соединений  4
		{
			for (var i = 0; i < nodes.length; i++) {
				for (var j = 0; j < nodes[i].connections.length; j++) {
					nodes[i].connections[j].text.attr({
						x: (nodes[i].connections[j].from.attr("cx") + nodes[i].connections[j].to.attr("cx")) /
							2,
						y: (nodes[i].connections[j].from.attr("cy") + nodes[i].connections[j].to.attr("cy")) /
							2
					});


					r.connection(nodes[i].connections[j]);
				}
			}
		}



		function Node(shape, circl, text, rect, predicat) {
			this.shape = shape;
			this.shape.toBack();
			this.circl = circl;
			this.text = r.text(this.shape.attr("cx"), this.shape.attr("cy"), text);
			this.srect = rect;
			this.isAlternativePredicat = null;
			this.rect = r.rect(this.shape.attr("cx") - this.shape.attr("rx"), this.shape.attr("cy") -
				this.shape.attr("ry"), this.shape.attr("rx") * 2, this.shape.attr("ry") * 2, 5);
			this.predicat = predicat;

			if (predicat) {
				this.rect.show();
			} else {
				this.rect.hide();
			}
			this.connections = [];

			shape.mynode = this;
			circl.mynode = this;
			rect.mynode = this;


			this.shape.drag(move, drag, up);
			this.circl.drag(movecircle, dragcircle, upcircle);
			this.srect.drag(null, rectClick, up);
			this.shape.attr({
				fill: Raphael.getColor(),
				stroke: Raphael.getColor(),
				"fill-opacity": 0,
				"stroke-width": 2,
				cursor: "move",
				"z-index": 100
			});
			this.circl.attr({
				fill: Raphael.getColor(),
				stroke: Raphael.getColor(),
				"fill-opacity": 0,
				"stroke-width": 2,
				'cursor': 'pointer'
			});
			this.srect.attr({
				fill: Raphael.getColor(),
				stroke: Raphael.getColor(),
				"fill-opacity": 0,
				"stroke-width": 2,
				'cursor': 'pointer'
			});
			this.text.toBack();
			this.add(r.connection(this.shape, this.circl, this.shape.attr("fill"), ""));
			this.connections[0].line.hide();



		}



		function tojson() {
			var jsonvariant = new Array();


			for (var i = 0; i < nodes.length; i++) {
				var node = new Object();
				node.node = nodes[i].text.attr("text");

				node.x = nodes[i].shape.attr("cx");
				node.y = nodes[i].shape.attr("cy");
				node.predicat = nodes[i].predicat;


				node.connect = new Array();
				for (var j = 1; j < nodes[i].connections.length; j++) {
					var toNode = new Object();
					toNode.to = nodes[i].connections[j].toNode.text.attr("text");
					toNode.deepCase = nodes[i].connections[j].text.attr("text")
					node.connect.push(toNode);
				}
				jsonvariant.push(node);

			}
			return JSON.stringify(jsonvariant);
		}




		Node.prototype.add = function (connection) {
			connection.text.attr({
				'cursor': 'pointer'
			});
			this.connections.push(connection)
		};

		Node.prototype.removeConnection = function (i) {
			this.connections[i].text.hide();
			this.connections[i].text.remove();
			this.connections[i].line.hide();
			this.connections[i].line.remove();
			this.connections.remove(i);
		}
		Node.prototype.shapeTouchesArea = function (x, y, w, h) {
			var tx;
			var ty;

			tx = this.shape.attr('cx') - this.shape.attr('rx') >= x && this.shape
				.attr('cx') - this.shape.attr('rx') <= x + w ||
				this.shape.attr('cx') + this.shape.attr('rx') >= x && this.shape
				.attr('cx') + this.shape.attr('rx') <= x + w ||
				this.shape.attr('cx') + this.shape.attr('rx') >= x + w && this.shape
				.attr('cx') - this.shape.attr('rx') <= x;



			ty = this.shape.attr('cy') - this.shape.attr('ry') >= y && this.shape
				.attr('cy') - this.shape.attr('ry') <= y + h ||
				this.shape.attr('cy') + this.shape.attr('ry') <= y + h && this.shape
				.attr('cy') + this.shape.attr('ry') >= y ||
				this.shape.attr('cy') - this.shape.attr('ry') <= y && this.shape
				.attr('cy') + this.shape.attr('ry') >= y + h;

			return tx && ty;
		}

		function iButton(rect, text) {
			this.text = r.text(rect.attr("x") + rect.attr("width") / 2, rect.attr("y") + rect.attr("height") / 2,
				text);
			this.text.toBack();
			this.rect = rect;
			rect.button = this;
			this.rect.attr({
				fill: Raphael.getColor(),
				stroke: Raphael.getColor(),
				"fill-opacity": 0,
				"stroke-width": 2,
				cursor: "move"
			});
			this.rect.drag(null, drag, up);

		}



		var admButton = new iButton(r.rect(275, 0, 75, 25, 1), "Готово");
		admButton.rect.click(
			function () {

				$.ajax({
					type: "POST",
					url: "updatesemanticjson",
					data: {
						"id": <%=@semantic.id%> ,
						"json": tojson()
					},
					success: function (msg) {
						alert(msg)
					}

				});

			}
		);



		var mistakeButton = new iButton(r.rect(350, 0, 75, 25, 1), "Ошибки");
		mistakeButton.rect.click(

			function () {
				$.ajax({
					type: "POST",
					url: "getmistakes",
					data: "id=" + <%=@semantic.id%> ,
					success: function (msg) {
						alert(msg)
					}

				});
			}


		);
		namesituation = r.text(400, 35, "Ситуация: " + "<%=@semantic.etalon.name%>");
		namesituation.attr({
			fill: Raphael.getColor(),
			stroke: Raphael.getColor(),
			"fill-opacity": 0
		});
		namesituation.attr({
			"font-size": 14,
			"font-family": "Arial, Helvetica, sans-serif"
		});

		var exitbutton = new iButton(r.rect(425, 0, 75, 25, 1), "Выход");

		exitbutton.rect.click(

			function () {
				if (confirm('Вы уверены?')) {

					document.location.href = "/";
				}


			}


		);




		function findNodeByName(Name) {
			for (var i = 0; i < nodes.length; i++) {
				if (nodes[i].text.attr("text") === Name) {
					return nodes[i];
				}
			}
		}

		function createlinks(pstring) {
			parsestring = JSON.parse(pstring)


		}

		function isHaveNode(name) {
			for (var i = 0; i < nodes.length; i++) {
				if (nodes[i].text.attr("text") === name) {
					return false;
				}
			}
			return true;
		}

		function getJsonEtalon() {
			var jsonsemantic = "<%=@semantic.etalon.nodejson%>".replace(/&quot;/g, '"');
			var shift = 0;
			var temp = 0;
			var parse = JSON.parse(jsonsemantic);
			for (var i = 0; i < parse.length; i++) {
				var nodeName = parse[i].node;
				if (temp > 5) {
					shift++;
					temp = 0;
				}
				var x = 100 + shift * 100;
				var y = 200 + temp * 50;
				var predicat = false;
				if (nodeName.length < 13) {
					nodes.push(new Node(r.ellipse(parseInt(x), parseInt(y), 50, 25), r.circle(parseInt(x) + 50 - 5,
							parseInt(y), 5), nodeName, r.rect(parseInt(x) - 50, parseInt(y) - 5, 10, 10, 1),
						predicat));
				} else {
					nodes.push(new Node(r.ellipse(parseInt(x), parseInt(y), 50 + 3 * (nodeName.length - 12), 25), r
						.circle(parseInt(x) + 50 - 5 + 3 * (nodeName.length - 12), parseInt(y), 5), nodeName, r
						.rect(parseInt(x) - 50 - 3 * (nodeName.length - 12), parseInt(y) - 5, 10, 10, 1),
						predicat));
				}
				temp++;
			}
		}


		function getJsonSemantic() {
			var jsonsemantic = "<%=@semantic.json%>".replace(/&quot;/g, '"');

			var parse = JSON.parse(jsonsemantic);
			for (var i = 0; i < parse.length; i++) {
				var connections = [];
				var nodeName = parse[i].node;
				var x = parse[i].x;
				var y = parse[i].y;
				var predicat = parse[i].predicat;
				if (nodeName.length < 13) {
					nodes.push(new Node(r.ellipse(parseInt(x), parseInt(y), 50, 25), r.circle(parseInt(x) + 50 - 5,
							parseInt(y), 5), nodeName, r.rect(parseInt(x) - 50, parseInt(y) - 5, 10, 10, 1),
						predicat));
				} else {
					nodes.push(new Node(r.ellipse(parseInt(x), parseInt(y), 50 + 3 * (nodeName.length - 12), 25), r
						.circle(parseInt(x) + 50 - 5 + 3 * (nodeName.length - 12), parseInt(y), 5), nodeName, r
						.rect(parseInt(x) - 50 - 3 * (nodeName.length - 12), parseInt(y) - 5, 10, 10, 1),
						predicat));
				}


			}
			for (var i = 0; i < parse.length; i++) {
				for (var j = 0; j < parse[i].connect.length; j++) {
					var node = findNodeByName(parse[i].node);
					node.add(r.connection(node.shape, findNodeByName(parse[i].connect[j].to), node.shape.attr("fill"),
						parse[i].connect[j].deepCase));


				}
			}


		}

		if ("<%=@semantic.json%>".length == 0) {
			getJsonEtalon();
		} else {
			getJsonSemantic();
		}

		texts = [];
		texts.push("Все глубинные падежи должны быть ");
		texts.push("написаны заглавными буквами");
		texts.push("английской расскладки");
		texts.push("A - быть «агентом» действия");
		texts.push("O - быть «объектом» действия");
		texts.push("E - быть «элементом» множества");
		texts.push("U - быть «подмножеством» множества");
		texts.push("H - быть характеристикой сделан из");
		texts.push("I - быть инструментом действия");
		texts.push("D - быть «адресатом» действия");
		texts.push("T - быть «темой» действия");
		texts.push("L - быть «местом» действия");
		texts.push("S - быть «начальной точкой» действия");
		texts.push("F - быть «конечной точкой» действия");
		texts.push("G - быть «целью» действия");
		texts.push("C - быть «условием» действия");
		texts.push("W - быть «временем» действия");
		texts.push("M - быть «способом» действия");
		texts.push("B - быть «сроком» действия");
		texts.push("X - быть «количеством» действия");
		texts.push("R - быть «результатом» действия");
		texts.push("K - быть «контрагентом» действия");



		helpmenu(texts);
		ellipseinfo();






	}
</script>