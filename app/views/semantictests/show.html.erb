
	<div id="newTest">
	</div>
	
<script type="text/javascript" src="/jquery.js"></script>
<script type="text/javascript" src="/raphael.js" ></script>
<style type="text/css">
tspan {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}
</style>
<script>
String.prototype.replaceAll = function (search, replace) {
    return this.split(search).join(replace);
}

Array.prototype.remove = function (index, stay) {
                    var a = [];
                    for (var i = 0; i < this.length; i++) {
                        a.push(this[i]);
                    }
                    a.splice(index, 1);
                    if (!stay) {
                        this.splice(index, 1);
                    }
                    return a;
                }
                var nodes = [];
                var name = "<%=@etalon.name%>";
                window.onload = function () {


                    Raphael.fn.connection = function (obj1, to, line, text) {

                        if (to instanceof Node) {
                            var obj2 = to.shape;
                        } else {
                            var obj2 = to;
                        }
                        if (obj1.line && obj1.from && obj1.to) {
                            line = obj1;

                            obj1 = line.from;
                            obj2 = line.to;
                        }

                        if (obj1 == null || obj2 == null) {
                            return;
                        }

                        var bb1 = obj1.getBBox(),
                            bb2 = obj2.getBBox(),
                            p = [{
                                    x: bb1.x + bb1.width / 2,
                                    y: bb1.y - 1
                                },
                                {
                                    x: bb1.x + bb1.width / 2,
                                    y: bb1.y + bb1.height + 1
                                },
                                {
                                    x: bb1.x - 1,
                                    y: bb1.y + bb1.height / 2
                                },
                                {
                                    x: bb1.x + bb1.width + 1,
                                    y: bb1.y + bb1.height / 2
                                },
                                {
                                    x: bb2.x + bb2.width / 2,
                                    y: bb2.y - 1
                                },
                                {
                                    x: bb2.x + bb2.width / 2,
                                    y: bb2.y + bb2.height + 1
                                },
                                {
                                    x: bb2.x - 1,
                                    y: bb2.y + bb2.height / 2
                                },
                                {
                                    x: bb2.x + bb2.width + 1,
                                    y: bb2.y + bb2.height / 2
                                }
                            ],
                            d = {},
                            dis = [];
                        for (var i = 0; i < 4; i++) {
                            for (var j = 4; j < 8; j++) {
                                var dx = Math.abs(p[i].x - p[j].x),
                                    dy = Math.abs(p[i].y - p[j].y);
                                if ((i == j - 4) || (((i != 3 && j != 6) || p[i].x < p[j].x) && ((i != 2 && j !=
                                                7) ||
                                            p[i].x > p[j].x) && ((i != 0 && j != 5) || p[i].y > p[j].y) &&
                                        ((i != 1 && j != 4) || p[i].y < p[j].y))) {
                                    dis.push(dx + dy);
                                    d[dis[dis.length - 1]] = [i, j];
                                }
                            }
                        }
                        if (dis.length == 0) {
                            var res = [0, 4];
                        } else {
                            res = d[Math.min.apply(Math, dis)];
                        }
                        var x1 = p[res[0]].x,
                            y1 = p[res[0]].y,
                            x4 = p[res[1]].x,
                            y4 = p[res[1]].y;
                        dx = Math.max(Math.abs(x1 - x4) / 2, 10);
                        dy = Math.max(Math.abs(y1 - y4) / 2, 10);
                        var x2 = [x1, x1, x1 - dx, x1 + dx][res[0]].toFixed(3),
                            y2 = [y1 - dy, y1 + dy, y1, y1][res[0]].toFixed(3),
                            x3 = [0, 0, 0, 0, x4, x4, x4 - dx, x4 + dx][res[1]].toFixed(3),
                            y3 = [0, 0, 0, 0, y1 + dy, y1 - dy, y4, y4][res[1]].toFixed(3);
                        var path = ["M", x1.toFixed(3), y1.toFixed(3), "C", x2, y2, x3, y3, x4.toFixed(3), y4
                            .toFixed(3)
                        ].join(",");


                        if (line && line.line) {

                            line.line.attr({
                                path: path
                            });
                        } else {
                            var color = typeof line == "string" ? line : "#000";

                            textObj = r.text((obj1.attr("cx") + obj2.attr("cx")) / 2, (obj1.attr("cy") + obj2
                                .attr("cy")) / 2, text);
                            textObj.myobj = obj1;
                            textObj.myline = line;
                            textObj.drag(null, textclick, null);


                            return {
                                text: textObj,
                                line: this.path(path).attr({
                                    stroke: color,
                                    fill: "none",
                                    "arrow-end": "open-wide-long"
                                }),
                                from: obj1,
                                to: obj2,
                                toNode: to
                            };
                        }
                    };

                    function textclick() {

                        this.hide();
                        this.remove();
                        cleanLinks();
                    }



                    function cleanLinks() {
                        for (var i = 0; i < nodes.length; i++) {
                            for (var j = 1; j < nodes[i].connections.length; j++) {

                                if (nodes[i].connections[j].text.attr("text") == null) {
                                    var temp = nodes[i].connections[j];
                                    nodes[i].connections[j].line.hide();
                                    nodes[i].connections[j] = nodes[i].connections[nodes[i].connections.length - 1];
                                    nodes[i].connections[nodes[i].connections.length - 1] = temp;
                                    nodes[i].connections[nodes[i].connections.length - 1].line.remove();
                                    nodes[i].connections.pop();
                                }
                            }
                        }
                    }


                    var r = Raphael("newTest", 1010, 750);
                    var windowSemantic = r.rect(1, 100, 1000, 640, 4);

                    function drag(x, y) {

                        this.ox = this.type == "rect" ? this.attr("x") : this.attr("cx");
                        this.oy = this.type == "rect" ? this.attr("y") : this.attr("cy");

                        this.animate({
                            "fill-opacity": 0.5
                        }, 10);
                    };

                    var up = function () {
                        this.animate({
                            "fill-opacity": 0.1
                        }, 100);
                        isBasket(deleteButton);
                    };

                    var move = function (x, y) {
                        var mynode = this.mynode;
                        mynode.shape.attr({
                            cx: this.ox + x,
                            cy: this.oy + y
                        });
                        mynode.circl.attr({
                            cx: this.ox + x + mynode.shape.attr("rx") - 5,
                            cy: this.oy + y
                        });
                        mynode.text.attr({
                            x: this.ox + x,
                            y: this.oy + y
                        });
                        mynode.srect.attr({
                            x: this.ox + x - mynode.shape.attr("rx"),
                            y: this.oy + y - 5
                        });
                        if (mynode.rect != null) {
                            mynode.rect.attr({
                                x: this.ox + x - mynode.shape.attr("rx"),
                                y: this.oy + y - mynode.shape.attr("ry")
                            });
                        }
                        updateConnections();
                        r.safari();
                    };

                    function dragcircle(x, y) {

                        this.ox = this.type == "rect" ? this.attr("x") : this.attr("cx");
                        this.oy = this.type == "rect" ? this.attr("y") : this.attr("cy");
                        this.mynode.connections[0].line.show();

                        this.animate({
                            "fill-opacity": 0.5
                        }, 100);
                    };
                    var movecircle = function (x, y) {
                        this.attr({
                            cx: this.ox + x,
                            cy: this.oy + y
                        });
                        r.connection(this.mynode.connections[0]);

                        r.safari();
                    }
                    var upcircle = function () {
                        addconnect(this.mynode);
                        updateConnections();
                        this.attr({
                            cx: this.mynode.shape.attr("cx") + this.mynode.shape.attr("rx") - 5,
                            cy: this.mynode.shape.attr("cy")
                        });
                        this.animate({
                            "fill-opacity": 0.1
                        }, 100);
                        r.connection(this.mynode.connections[0]);
                        this.mynode.connections[0].line.hide();
                    }

                    var rectClick = function () {
                        var mynode = this.mynode;

                        if (mynode.predicat) {
                            mynode.predicat = false;
                            mynode.rect.hide();
                        } else {
                            mynode.predicat = true;
                            mynode.rect.show();
                            mynode.isAlternativePredicat = confirm(
                                "Нажмите Ок если это Альтернативная предикатная вершина");
                        }
                    }

                    function addconnect(node) // создание связи
                    {
                        for (var i = 0; i < nodes.length; i++) {
                            if ((Math.pow((node.circl.attr("cx")) - (nodes[i].shape.attr("cx")), 2) / Math.pow(
                                        nodes[i].shape.attr("rx"), 2) +
                                    Math.pow((node.circl.attr("cy")) - (nodes[i].shape.attr("cy")), 2) / Math.pow(
                                        nodes[i].shape.attr("ry"), 2)) <= 1 &&
                                node != nodes[i]) {
                                var act = prompt('Введите название Глубинного падежа');
                                if (act != null && act.length == 1) {
                                    node.add(r.connection(node.shape, nodes[i], node.shape.attr("fill"), act));

                                }

                            }
                        }
                    }

                    function updateConnections() //Обновление всех соединений  4
                    {
                        for (var i = 0; i < nodes.length; i++) {
                            for (var j = 0; j < nodes[i].connections.length; j++) {
                                nodes[i].connections[j].text.attr({
                                    x: (nodes[i].connections[j].from.attr("cx") + nodes[i].connections[j].to
                                        .attr("cx")) / 2,
                                    y: (nodes[i].connections[j].from.attr("cy") + nodes[i].connections[j].to
                                        .attr("cy")) / 2
                                });


                                r.connection(nodes[i].connections[j]);
                            }
                        }
                    }

                    function Node(shape, circl, text, rect, predicat, isAlternative = false) {
                        this.shape = shape;
                        this.shape.toBack();
                        this.circl = circl;
                        this.text = r.text(this.shape.attr("cx"), this.shape.attr("cy"), text);
                        this.srect = rect;
                        this.isAlternativePredicat = isAlternative;
                        this.rect = r.rect(this.shape.attr("cx") - this.shape.attr("rx"), this.shape.attr("cy") -
                            this.shape.attr("ry"), this.shape.attr("rx") * 2, this.shape.attr("ry") * 2, 5);
                        this.predicat = predicat;

                        if (predicat) {
                            this.rect.show();
                        } else {
                            this.rect.hide();
                        }
                        this.connections = [];

                        shape.mynode = this;
                        circl.mynode = this;
                        rect.mynode = this;


                        this.shape.drag(move, drag, up);
                        this.circl.drag(movecircle, dragcircle, upcircle);
                        this.srect.drag(null, rectClick, up);
                        this.shape.attr({
                            fill: Raphael.getColor(),
                            stroke: Raphael.getColor(),
                            "fill-opacity": 0,
                            "stroke-width": 2,
                            cursor: "move",
                            "z-index": 100
                        });
                        this.circl.attr({
                            fill: Raphael.getColor(),
                            stroke: Raphael.getColor(),
                            "fill-opacity": 0,
                            "stroke-width": 2,
                            'cursor': 'pointer'
                        });
                        this.srect.attr({
                            fill: Raphael.getColor(),
                            stroke: Raphael.getColor(),
                            "fill-opacity": 0,
                            "stroke-width": 2,
                            'cursor': 'pointer'
                        });
                        this.text.toBack();
                        this.add(r.connection(this.shape, this.circl, this.shape.attr("fill"), ""));
                        this.connections[0].line.hide();


                    }

                    function tonodenamelist() {
                        var jsonvariant = new Array();
                        for (var i = 0; i < nodes.length; i++) {
                            var node = new Object();
                            node.node = nodes[i].text.attr("text");
                            jsonvariant.push(node);
                        }
                        return JSON.stringify(jsonvariant);
                    }

                    function tojson() {
                        var jsonvariant = new Array();


                        for (var i = 0; i < nodes.length; i++) {
                            var node = new Object();
                            node.node = nodes[i].text.attr("text");

                            node.x = nodes[i].shape.attr("cx");
                            node.y = nodes[i].shape.attr("cy");
                            node.predicat = nodes[i].predicat;
                            node.alternative = nodes[i].isAlternativePredicat;

                            node.connect = new Array();
                            for (var j = 1; j < nodes[i].connections.length; j++) {
                                var toNode = new Object();
                                toNode.to = nodes[i].connections[j].toNode.text.attr("text");
                                toNode.deepCase = nodes[i].connections[j].text.attr("text")
                                node.connect.push(toNode);
                            }
                            jsonvariant.push(node);

                        }
                        return JSON.stringify(jsonvariant);
                    }




                    Node.prototype.add = function (connection) {
                        connection.text.attr({'cursor':'pointer'});
                        this.connections.push(connection)
                    };
                    Node.prototype.removeConnection = function (i) {
                        this.connections[i].text.hide();
                        this.connections[i].text.remove();
                        this.connections[i].line.hide();
                        this.connections[i].line.remove();
                        this.connections.remove(i);
                    }
                    Node.prototype.shapeTouchesArea = function (x, y, w, h) {
                        var tx;
                        var ty;

                        tx = this.shape.attr('cx') - this.shape.attr('rx') >= x  && this.shape
                            .attr('cx') - this.shape.attr('rx') <= x + w ||
                            this.shape.attr('cx') + this.shape.attr('rx') >= x  && this.shape
                            .attr('cx') + this.shape.attr('rx') <= x + w ||
                            this.shape.attr('cx') + this.shape.attr('rx') >= x + w && this.shape
                            .attr('cx') - this.shape.attr('rx') <= x ;



                        ty = this.shape.attr('cy') - this.shape.attr('ry') >= y && this.shape
                            .attr('cy') - this.shape.attr('ry') <= y + h ||
                            this.shape.attr('cy') + this.shape.attr('ry') <= y + h && this.shape
                            .attr('cy') + this.shape.attr('ry') >= y  ||
                            this.shape.attr('cy') - this.shape.attr('ry') <= y && this.shape
                            .attr('cy') + this.shape.attr('ry') >= y + h;

                        return tx && ty;
                    }

                    function iButton(rect, text) {
                        this.rect = rect;
                        this.text = r.text(this.rect.attr("x") + this.rect.attr("width") / 2, this.rect.attr("y") +
                            this.rect.attr("height") / 2, text);
                        rect.button = this;
                        this.rect.attr({
                            fill: Raphael.getColor(),
                            stroke: Raphael.getColor(),
                            "fill-opacity": 0,
                            "stroke-width": 2,
                            cursor: "pointer"
                        });
                        this.text.toBack();
                        this.rect.drag(null, drag, up);

                    }
                    document.onmousemove = function () {
                        var backet = deleteButton;
                        var res = false;
                        for (var i = 0; i < nodes.length; i++) {
                            res = res || (nodes[i].shapeTouchesArea(backet.attr('x'), backet.attr('y'), backet
                                .attr('width'), backet.attr('height')))
                        }
                        deleteButton.attr({
                            'opacity': res ? 1 : 0.5
                        });


                    }

                    function isBasket(backet, x, y) {
                        //alert(basket)
                        for (var i = 0; i < nodes.length; i++) {
                            if (nodes[i].shapeTouchesArea(backet.attr('x'), backet.attr('y'), backet.attr('width'),
                                    backet.attr('height'))) {
                                deleteButton.attr({
                                    'opacity': 0.5
                                });
                                deleteNode(nodes[i]);
                                nodes[i].shape.hide();
                                nodes[i].shape.remove();
                                nodes[i].text.hide();
                                nodes[i].text.remove();
                                nodes[i].circl.hide();
                                nodes[i].circl.remove();
                                nodes[i].srect.hide();
                                nodes[i].srect.remove();
                                nodes[i].rect.hide();
                                nodes[i].rect.remove();
                                var temp = nodes[i];
                                nodes[i] = nodes[nodes.length - 1];
                                nodes[nodes.length - 1] = temp;
                                nodes.pop();
                            }
                        }
                    }

                    function deleteNode(delNode) {
                        for (var i = delNode.connections.length - 1; i >= 0; i--) {
                            delNode.removeConnection(i);
                        }
                        for (var i = 0; i < nodes.length; i++) {
                            for (var j = nodes[i].connections.length - 1; j >= 1; j--) {
                                if (nodes[i].connections[j].toNode == delNode) {
                                    nodes[i].removeConnection(j);
                                }
                            }
                        }

                        //cleanLinks();
                    }



                    var deleteButton = r.image("/Images/delete.png", 550, 550, 56, 80);
                    deleteButton.attr({
                        'opacity': 0.5
                    });


                    var newNodeButton = new iButton(r.rect(150, 75, 125, 25, 1), "Создать новую вершину");
                    newNodeButton.rect.click(
                        function () {
                            var act = prompt('Введите название вершины');
                            if (act == null) {
                                return
                            }
                            if (isHaveNode(act)) {
                                var x = 200;
                                var y = 150;
                                var rx = 40 + act.length * 2;
                                //act = act.replace(" ", "\n");
                                var ry = 25;

                                nodes.push(new Node(r.ellipse(x, y, rx, ry), r.circle(x + rx - 5, y, 5), act, r
                                    .rect(x - rx, y - 5, 10, 10, 1), "false", false));
                            } else {
                                alert("Такая вершина уже существует");
                            }

                        }
                    );

                    var admButton = new iButton(r.rect(425, 75, 75, 25, 1), "Готово");
                    admButton.rect.click(
                        function () {
                            $.ajax({
                                type: "POST",
                                url: "updateJson",
                                data: {
                                    "id": <%=@etalon.id%>,
                                    "etalonjson": tojson(),
                                    "name": name,
                                    "namesjson": tonodenamelist()
                                },
                                success: function (msg) {
                                    alert(msg)
                                }

                            });
                        }
                    );


                    var infoButton = new iButton(r.rect(500, 75, 75, 25, 1), "Инфо");
                    infoButton.rect.click(

                        function () {
                            //alert('<%=@etalon.etalonjson%>')
                            alert(
                                'Для создания новой вершины, требуется нажать на кнопку "создать новую вершину"\n Для создания связи перетяните кружок из одной вершины в другую\n Для превращения вершины в предикатную используйте элемент в виде квадрата'
                            );
                        }


                    );



                    var exitbutton = new iButton(r.rect(575, 75, 75, 25, 1), "Выход");
                    exitbutton.rect.click(

                        function () {
                            if (confirm('Вы уверены?')) {

                                document.location.href = "/";
                            }


                        }


                    );



                    var jsonButton = new iButton(r.rect(650, 75, 150, 25, 1), "Получить JSON");
                    jsonButton.rect.click(
                        function () {
                            console.log(tojson())
                            alert(tojson())

                        }
                    );


                    var nameButton = new iButton(r.rect(275, 75, 150, 25, 1), "Изменить название варианта");
                    nameButton.rect.click(
                        function () {
                            var act = prompt('Введите Новое название варианта, текущее название ' + name);
                            if (act != null) {
                                name = act;
                            }

                        }
                    )

                    function findNodeByName(Name) {
                        for (var i = 0; i < nodes.length; i++) {
                            if (nodes[i].text.attr("text") === Name) {
                                return nodes[i];
                            }
                        }
                    }



                    function isHaveNode(name) {
                        for (var i = 0; i < nodes.length; i++) {
                            if (nodes[i].text.attr("text") === name) {
                                return false;
                            }
                        }
                        return true;
                    }

                    function getJson() {
                        var parse = JSON.parse('<%=@etalon.etalonjson%>'.replaceAll('&quot;','"'));
                        for (var i = 0; i < parse.length; i++) {
                            var connections = [];
                            var nodeName = parse[i].node;
                            var x = parse[i].x;
                            var y = parse[i].y;
                            var predicat = parse[i].predicat;
                            var alternative = false;
                            var rx = 40 + nodeName.length * 2;

                            if (!(typeof parse[i].alternative === 'undefined'))
                                alternative = parse[i].alternative;

                            nodes.push(new Node(r.ellipse(parseInt(x), parseInt(y), rx, 25), r
                                .circle(parseInt(x) +
                                    rx - 5, parseInt(y), 5), nodeName, r.rect(parseInt(x) - rx, parseInt(
                                    y) - 5, 10, 10, 1), predicat, alternative));

                        }
                        for (var i = 0; i < parse.length; i++) {
                            for (var j = 0; j < parse[i].connect.length; j++) {
                                var node = findNodeByName(parse[i].node);
                                node.add(r.connection(node.shape, findNodeByName(parse[i].connect[j].to), node.shape
                                    .attr("fill"), parse[i].connect[j].deepCase));


                            }
                        }


                    }

                    getJson();
                    deleteButton.toBack();

                }



</script>
